# version: '2.2'
# services:
#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.4.0
#     container_name: elasticsearch
#     volumes:
#       - elasticsearch-data:/usr/share/elasticsearch/data
#     ports:
#       - 9200:9200
#     restart: always
#     environment:
#       - xpack.security.enabled=false
#       - xpack.security.authc.api_key.enabled=false
#       - xpack.reporting.kibanaServer.hostname=localhost
#       - discovery.type=single-node
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     mem_limit: 4g

#   kibana:
#     depends_on:
#       - elasticsearch
#     image: docker.elastic.co/kibana/kibana:8.4.0
#     container_name: kibana
#     volumes:
#       - kibana-data:/usr/share/kibana/data
#     ports:
#       - 5601:5601
#     restart: always
#     environment:
#       - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#     mem_limit: 1g

#   logstash:
#     image: docker.elastic.co/logstash/logstash:8.4.0
#     container_name: logstash
#     depends_on:
#       - elasticsearch
#     volumes:
#       - ./logstash.yml:/usr/share/logstash/config/logstash.yml
#       - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
#     ports:
#       - 5044:5044  
#       - 9600:9600 # For Logstash TCP/UDP input (can be used for other log shippers)
#     environment:
#       - ELASTICSEARCH_HOST=http://elasticsearch:9200
#     restart: always
#     mem_limit: 3g
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1

#   # logstash-exporter:
#   #   build: .
#   #   container_name: persia
#   #   depends_on: 
#   #     - logstash
#   #   ports:
#   #     - 9124:9124
#   #   restart: unless-stopped

#    # logstash-exporter:
#   #   build: .
#   #   container_name: persia
#   #   depends_on: 
#   #     - logstash
#   #   ports:
#   #     - 9124:9124
#   #   restart: unless-stopped

  
    

# volumes:
#   elasticsearch-data:
#     driver: local
#   kibana-data:
#     driver: local

version: "2.3"

volumes:
 certs:
   driver: local
 esdata01:
   driver: local
 kibanadata:
   driver: local



networks:
 default:
   name: elastic
   external: false


services:
  setup:
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
   user: "0"
   command: >
     bash -c '
       sysctl -w vm.max_map_count=262144

       if [ x${ELASTIC_PASSWORD} == x ]; then
         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
         exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
         echo "Creating CA";
         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
         unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
         echo "Creating certs";
         echo -ne \
         "instances:\n"\
         "  - name: es01\n"\
         "    dns:\n"\
         "      - es01\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: kibana\n"\
         "    dns:\n"\
         "      - kibana\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         > config/certs/instances.yml;
         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
         unzip config/certs/certs.zip -d config/certs;
       fi;
       echo "Setting file permissions"
       chown -R root:root config/certs;
       find . -type d -exec chmod 750 \{\} \;;
       find . -type f -exec chmod 640 \{\} \;;
       echo "Waiting for Elasticsearch availability";
       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
   depends_on:
     es01:
       condition: service_healthy
   image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
   labels:
     co.elastic.logs/module: kibana
   volumes:
     - certs:/usr/share/kibana/config/certs
     - kibanadata:/usr/share/kibana/data
   ports:
     - ${KIBANA_PORT}:5601
   environment:
     - SERVERNAME=kibana
     - ELASTICSEARCH_HOSTS=https://es01:9200
     - ELASTICSEARCH_USERNAME=kibana_system
     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
     - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
   mem_limit: ${KB_MEM_LIMIT}
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120
  selenium-kibana:
    depends_on:
      - es01
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: selenium_kibana_bot
    volumes:
      - ./screenshots:/app/screenshots
    restart: unless-stopped